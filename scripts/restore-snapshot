#!/bin/bash

function usage() {
  echo "Usage: restore-snapshot [ -d <db-file[:name]> ] [ -w <web-site[:branch[:name]]> ] [ -x dry ] [ -v verbose ]"
}

function database_exists() {
  db="$1"
  mysql -u root -e "use $db" 2> /dev/null
  [ $? -eq 0 ] && echo "exists"
}

function require_apache_stopped() {
  status=$(service apache2 status | grep -v "apache2 is not running$")
  [ ! -z "$status" ] && echo "Cannot restore a website with apache status \"$status\"" && exit
}

function require_branch() {
  repo=$1
  branch=$2
  pushd $repo &> /dev/null
  git rev-parse --verify $branch &> /dev/null
  [ $? -ne 0 ] && echo "Cannot find branch $branch in repository $repo. Exiting now." && exit
}

function get_current_branch() {
  repo=$1
  pushd $repo &> /dev/null
  branch="$(git branch 2> /dev/null | grep "\*" | cut -d ' ' -f 2)"
  echo $branch
}

function report() {
  [ ! -z "$verbose" ] && echo "$1"
}

function execute() {
  cmd="$1"
  [ ! -z "$verbose" ] && echo -n "$cmd"
  if [ -z "$dry_run" ]
  then
    [ ! -z "$verbose" ] && echo -n " ... "
    eval "$cmd"
    result=$?
    if [ $result -eq 0 ]
    then
      [ ! -z "$verbose" ] && echo "($result)"
    else
      echo -n "Command failed ($result)"
      [ -z "$verbose" ] && echo -n "\"$cmd\""
      echo ""
    fi
  else
    echo ""
  fi
}
  
###############################

while getopts "d:w:xv" option
do
  case $option in
    d) db=$OPTARG;;
    w) web=$OPTARG;;
    x) verbose=true; dry_run=true;;
    v) verbose=true;
  esac
done

if [ ! -z "$web" ]
then
  if [[ "$web" == *:* ]]
  then
    web_repo=${web%%:*}
    web_branch=${web#*:}
    if [[ "$web_branch" == *:* ]]
    then
      web_name=${web_branch#*:}
      web_branch=${web_branch%:*}
    fi
  else
    web_repo=$web
    web_branch="master"
  fi
  [ -z "$web_name" ] && web_name=$(basename $web_repo)
  require_branch $web_repo $web_branch

  [ ! -d "$web_repo" ] && echo "Cannot find website repository $web_repo" && exit
  [ $web_branch == $(get_current_branch $web_repo) ] && web_use_tree=true
  web_base="/hd/www/html"
  todo=true
fi

if [ ! -z "$db" ]
then
  if [[ $db == *:* ]]
  then
    db_data=${db%:*}
    db_name=${db#*:}
  else
    db_data="$db"
    db_name=$(basename $db)
    db_name=${db_name%.sql}
  fi
  [[ ! -z "$db" && ! -e "$db_data" ]] && echo "Cannot find db data \"$db_data\". Exiting now." && exit
  [ -z "$(which mysql)" ] && echo "Cannot find mysql. Exiting now." && exit
  todo=true
fi

[ -z "$todo" ] && usage && exit
require_apache_stopped

echo -e "Restoring:"
if [ ! -z "$web" ]
then
  [ ! -z "$web_use_tree" ] && current_mark="*"
  echo -e "\tweb repo $web_repo (branch $current_mark$web_branch) to site $web_name"
fi
[ ! -z "$db" ] && echo -e "\tdatabase: $db_name (from $db_data)"

while (true)
do
  read -d $'\n' -p "Continue? [Y/n] " ok
  if [ -z "$ok" ]
  then
    break
  else
    case $ok in
      [yY]) break;;
      [nN]) echo "ok, exiting"; exit;;
      *) echo "What's that?";;
    esac
  fi
done

if [ ! -z "$db" ]
then
  echo "Restoring database..."
  [ ! -z "$(database_exists $db_name)" ] && execute "mysql -u root -e \"drop database $db_name;\""
  execute "mysql -u root -e \"create database $db_name;\""
  execute "mysql $db_name < $db_data"
fi

if [ ! -z "$web" ]
then
  echo "Restoring website sources..."
  execute "rm -rf $web_base/$web_name"
  if [ ! -z "$web_use_tree" ]
  then
    execute "rsync -a --exclude='.git' ${web_repo%/} $web_base"
  else
    execute "cd $web_repo &> /dev/null"
    execute "git archive --format=tar $branch | tar -x -C $web_base/$web_name"
  fi
fi
